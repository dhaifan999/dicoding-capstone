# -*- coding: utf-8 -*-
"""Final Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NQiE37B7Tas_puUyzT8D4u2UZwsF6bcP

# **Tomato Leaf Disease Classification Using VGG16**

Over 20k images of tomato leaves with 10 diseases and 1 healthy class. Images are collected from both lab scenes and in-the-wild scenes. The goal is to develop a lightweight model that can predict tomato leaf disease & deploy it offline on a mobile app.

Classes:

*   Late_blight
*   healthy
*   Early_blight
*   Septorialeafspot
*   TomatoYellowLeafCurlVirus
*   Bacterial_spot
*   Target_Spot
*   Tomatomosaicvirus
*   Leaf_Mold
*   Spidermites Two-spottedspider_mite
*   Powdery Mildew

The original source of most of the images is the PlantVillage dataset published here and here. The data has been augmented offline using multiple advanced techniques like image flipping, Gamma correction, noise injection, PCA color augmentation, rotation, and scaling. Some recent images were generated offline with GANs. The subset of images containing Taiwan tomato leaves was augmented using rotations at multiple angles, mirroring, reducing image brightness, etc.

**Dataset** : Tomato Disease Multiple Sources

**Sumber**: Kaggle Dataset [**Tomato Disease Multiple Sources**](https://www.kaggle.com/datasets/cookiefinder/tomato-disease-multiple-sources?select=train)

## Importing Library
"""

#Directory

import os, zipfile, shutil

#Preprocessing, Dense, Layer

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from glob import glob
import sklearn.metrics as metrics
import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Flatten, Dense
from tensorflow.keras.applications import VGG16
from keras.layers import Activation
from keras.layers import MaxPooling2D
from keras.callbacks import ModelCheckpoint

#plotting Model Acc and Loss
import matplotlib.pyplot as plt

"""## Importing Dataset"""

#install kaggle package
!pip install -q kaggle

#upload kaggle.json
from google.colab import files
files.upload()

!rm -r ~/.kaggle
!mkdir ~/.kaggle
!mv ./kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d cookiefinder/tomato-disease-multiple-sources

!unzip /content/tomato-disease-multiple-sources.zip

"""### **Data Visualization**"""

#bacterial spot
bacterial_spot = os.listdir("/content/train/Bacterial_spot")
bacterial_spot_dir = "/content/train/Bacterial_spot"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(bacterial_spot_dir, bacterial_spot[i]))
    plt.title("bactrial_spot")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

early_blight = os.listdir("/content/train/Early_blight")
early_blight_dir = "/content/train/Early_blight"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(early_blight_dir, early_blight[i]))
    plt.title("early_blight")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

late_blight = os.listdir("/content/train/Late_blight")
late_blight_dir = "/content/train/Late_blight"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(late_blight_dir, late_blight[i]))
    plt.title("late_blight")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

leaf_mold = os.listdir("/content/train/Leaf_Mold")
leaf_mold_dir = "/content/train/Leaf_Mold"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(leaf_mold_dir, leaf_mold[i]))
    plt.title("leaf_mold")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

septoria_leaf_spot = os.listdir("/content/train/Septoria_leaf_spot")
septoria_leaf_spot_dir = "/content/train/Septoria_leaf_spot"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(septoria_leaf_spot_dir, septoria_leaf_spot[i]))
    plt.title("septoria_leaf_spot")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

spider_mite = os.listdir("/content/train/Spider_mites Two-spotted_spider_mite")
spider_mite_dir = "/content/train/Spider_mites Two-spotted_spider_mite"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(spider_mite_dir, spider_mite[i]))
    plt.title("spider_mite")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

target_spot = os.listdir("/content/train/Target_Spot")
target_spot_dir = "/content/train/Target_Spot"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(target_spot_dir, target_spot[i]))
    plt.title("target_spot")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

Tomato_Yellow_Leaf_Curl_Virus = os.listdir("/content/train/Tomato_Yellow_Leaf_Curl_Virus")
Tomato_Yellow_Leaf_Curl_Virus_dir = "/content/train/Tomato_Yellow_Leaf_Curl_Virus"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(Tomato_Yellow_Leaf_Curl_Virus_dir, Tomato_Yellow_Leaf_Curl_Virus[i]))
    plt.title("Tomato_Yellow_Leaf_Curl_Virus")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

Tomato_mosaic_virus = os.listdir("/content/train/Tomato_mosaic_virus")
Tomato_mosaic_virus_dir = "/content/train/Tomato_mosaic_virus"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(Tomato_mosaic_virus_dir, Tomato_mosaic_virus[i]))
    plt.title("Tomato_mosaic_virus")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

healthy = os.listdir("/content/train/healthy")
healthy_dir = "/content/train/healthy"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(healthy_dir, healthy[i]))
    plt.title("healthy")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

powdery_mildew = os.listdir("/content/train/powdery_mildew")
powdery_mildew_dir = "/content/train/powdery_mildew"

plt.figure(figsize=(15, 5))

for i in range(9):
    plt.subplot(3, 3, i + 1)
    img = plt.imread(os.path.join(powdery_mildew_dir, powdery_mildew[i]))
    plt.title("powdery_mildew")
    plt.imshow(img)
    plt.axis('off')
    
plt.tight_layout()

"""**Image Data Generator**

Augmentasi Data
"""

train_dir = "/content/train"
validation_dir = "/content/valid"

training_datagen = ImageDataGenerator(
    rescale = 1./255,
    vertical_flip=True,
    horizontal_flip=True,
    zoom_range=0.2,
    )

val_datagen = ImageDataGenerator(
    rescale=1./255)

train_generator = training_datagen.flow_from_directory(
    train_dir,
    class_mode='categorical',
    target_size=(224,224), 
    shuffle=True,
    batch_size=64)
validation_generator = val_datagen.flow_from_directory(
    validation_dir,
    class_mode='categorical',
    target_size=(224,224),
    batch_size=64)

"""**Initialization**"""

num_classes= 11
IMAGE_SHAPE = [224, 224]
epochs = 75

"""**Load and Compile the VGG Model**"""

vgg = VGG16(input_shape = (224,224,3),
            weights = 'imagenet',
            include_top = False)

for layer in vgg.layers:
 layer.trainable = False
x = Flatten()(vgg.output)
x = Dense(128, activation = 'relu')(x)
x = Dense(64, activation = 'relu')(x) 
x = Dense(num_classes, activation = 'softmax')(x)

from keras.optimizers import Adam
opt = Adam(lr=0.001)
model = Model(inputs = vgg.input, outputs = x)
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

"""**Callback Function**"""

#Callback Function
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.91 and logs.get('val_accuracy')>0.9):
      print("\n Your accuracy model is quite enought ")
      self.model.stop_training = True
callbacks = myCallback()

"""**Visualize VGG19 Model**"""

vgg.summary()

from keras.utils.vis_utils import plot_model
plot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)

!pip install visualkeras
import visualkeras
visualkeras.layered_view(model,legend = True, spacing = 30)

from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True

hist = model.fit_generator(train_generator,
                    validation_data=validation_generator,
                    callbacks=[callbacks],
                    epochs=epochs, verbose=1)

print('Training Completed!')

"""**Plotting Accuracy and Loss**

**Accuracy**
"""

import matplotlib.pyplot as plt
plt.plot(hist.history['accuracy'], 'b')
plt.plot(hist.history['val_accuracy'], 'r')
plt.title('Akurasi Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""**Loss**"""

import matplotlib.pyplot as plt
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""**Confusion Matrix**"""

batch_size = 64
y_pred = model.predict(validation_generator, (validation_generator.samples / batch_size))
val_preds = np.argmax(y_pred, axis=1)
import sklearn.metrics as metrics
val_trues =validation_generator.classes
from sklearn.metrics import classification_report
print(classification_report(val_trues, val_preds))

import seaborn as sns
data = {'y_Actual': val_trues,
        'y_Predicted': val_preds
        }

df = pd.DataFrame(data, columns=['y_Actual','y_Predicted'])
confusion_matrix = pd.crosstab(df['y_Actual'], df['y_Predicted'], rownames=['Actual'], colnames=['Predicted'], margins = True)
plt.figure(figsize = (8,8))
sns.heatmap(confusion_matrix, annot=True)
plt.show()

"""**Save the Model**"""

keras_file="tomato_leaf_model_vgg19.h5"
tf.keras.models.save_model(model,keras_file)

!pip install tensorflowjs

!tensorflowjs_converter \
    --input_format=keras \
    /content/tomato_leaf_model_vgg19.h5 \
    /tmp/tfjs_float_modell

!zip -r /content/tfjs_model.zip /tmp/tfjs_float_modell

# Download the garbage detection model
files.download('/content/tfjs_model.zip')

print('`/content/tfjs_model.zip` has been downloaded')

"""**Prediction using new image**

"""

#create new file test.py and run this file
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import preprocess_input, decode_predictions
import numpy as np
#load saved model
model = load_model("tomato_leaf_model_vgg19.h5") 
img_path = "/content/train/powdery_mildew/pm12_change_270.jpg"
img = image.load_img(img_path, target_size=(224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)
preds=model.predict(x)
# create a list containing the class labels
class_labels = ["Bacterial_Spot","Early_blight","Late_blight","Leaf_mold","Septoria_leaf_spot","Spider_mites Two_Spotted_spider_mite","Target_spot","Tomato_yellow_Leaf_Curl_Virus","Tomato_mosaic_virus","Healthy","Powdery_mildew"]
# find the index of the class with maximum score
pred = np.argmax(preds, axis=-1)
# print the label of the class with maximum score
plt.imshow(img)
print(class_labels[pred[0]])

X,y = validation_generator.next()
y = np.argmax(y, axis=1)

from sklearn.neural_network import MLPClassifier
from sklearn.metrics import plot_confusion_matrix
class newmodel(MLPClassifier):
    def __init__(self, model):
        self.model = model
    def predict(self, X):
        y = self.model.predict(X)
        return np.argmax(y,axis=1)

model_cm = newmodel(model)
plot_confusion_matrix(model_cm, X, y , normalize='true', xticks_rotation = 'vertical', display_labels = list(train_generator.class_indices.keys()))